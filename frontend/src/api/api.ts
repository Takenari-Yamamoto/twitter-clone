/* tslint:disable */
/* eslint-disable */
/**
 * Twitter Clone API
 * Twitter Clone API仕様
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthLoginPost200Response
 */
export interface AuthLoginPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPost200Response
     */
    'token'?: string;
    /**
     * 
     * @type {User}
     * @memberof AuthLoginPost200Response
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface AuthLoginPostRequest
 */
export interface AuthLoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthLoginPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthSignupPostRequest
 */
export interface AuthSignupPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupPostRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {User}
     * @memberof LoginResponse
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Tweet
 */
export interface Tweet {
    /**
     * 
     * @type {number}
     * @memberof Tweet
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    'content'?: string;
    /**
     * 
     * @type {number}
     * @memberof Tweet
     */
    'userId'?: number;
    /**
     * 
     * @type {User}
     * @memberof Tweet
     */
    'user'?: User;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tweet
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TweetsPostRequest
 */
export interface TweetsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TweetsPostRequest
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatarUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ログイン
         * @param {AuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (body: AuthLoginPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authLoginPost', 'body', body)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ユーザー登録
         * @param {AuthSignupPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost: async (body: AuthSignupPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authSignupPost', 'body', body)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ログイン
         * @param {AuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(body: AuthLoginPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthLoginPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ユーザー登録
         * @param {AuthSignupPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignupPost(body: AuthSignupPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignupPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authSignupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary ログイン
         * @param {AuthLoginPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(body: AuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthLoginPost200Response> {
            return localVarFp.authLoginPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ユーザー登録
         * @param {AuthSignupPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost(body: AuthSignupPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.authSignupPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary ログイン
     * @param {AuthLoginPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(body: AuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ユーザー登録
     * @param {AuthSignupPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSignupPost(body: AuthSignupPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSignupPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TweetsApi - axios parameter creator
 * @export
 */
export const TweetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ツイート一覧取得
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsGet: async (page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tweets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ツイート投稿
         * @param {TweetsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsPost: async (body: TweetsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tweetsPost', 'body', body)
            const localVarPath = `/tweets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ツイートを削除
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdDelete: async (tweetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            assertParamExists('tweetsTweetIdDelete', 'tweetId', tweetId)
            const localVarPath = `/tweets/{tweetId}`
                .replace(`{${"tweetId"}}`, encodeURIComponent(String(tweetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 特定のツイートを取得
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdGet: async (tweetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            assertParamExists('tweetsTweetIdGet', 'tweetId', tweetId)
            const localVarPath = `/tweets/{tweetId}`
                .replace(`{${"tweetId"}}`, encodeURIComponent(String(tweetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary いいねを取り消す
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdLikeDelete: async (tweetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            assertParamExists('tweetsTweetIdLikeDelete', 'tweetId', tweetId)
            const localVarPath = `/tweets/{tweetId}/like`
                .replace(`{${"tweetId"}}`, encodeURIComponent(String(tweetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ツイートにいいねをする
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdLikePost: async (tweetId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            assertParamExists('tweetsTweetIdLikePost', 'tweetId', tweetId)
            const localVarPath = `/tweets/{tweetId}/like`
                .replace(`{${"tweetId"}}`, encodeURIComponent(String(tweetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 特定のユーザーのツイート一覧を取得
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdTweetsGet: async (userId: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdTweetsGet', 'userId', userId)
            const localVarPath = `/users/{userId}/tweets`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TweetsApi - functional programming interface
 * @export
 */
export const TweetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TweetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ツイート一覧取得
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tweetsGet(page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tweet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tweetsGet(page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.tweetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ツイート投稿
         * @param {TweetsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tweetsPost(body: TweetsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tweet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tweetsPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.tweetsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ツイートを削除
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tweetsTweetIdDelete(tweetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tweetsTweetIdDelete(tweetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.tweetsTweetIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 特定のツイートを取得
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tweetsTweetIdGet(tweetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tweet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tweetsTweetIdGet(tweetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.tweetsTweetIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary いいねを取り消す
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tweetsTweetIdLikeDelete(tweetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tweetsTweetIdLikeDelete(tweetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.tweetsTweetIdLikeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ツイートにいいねをする
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tweetsTweetIdLikePost(tweetId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tweetsTweetIdLikePost(tweetId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.tweetsTweetIdLikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 特定のユーザーのツイート一覧を取得
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdTweetsGet(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tweet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdTweetsGet(userId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TweetsApi.usersUserIdTweetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TweetsApi - factory interface
 * @export
 */
export const TweetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TweetsApiFp(configuration)
    return {
        /**
         * 
         * @summary ツイート一覧取得
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsGet(page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Tweet>> {
            return localVarFp.tweetsGet(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ツイート投稿
         * @param {TweetsPostRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsPost(body: TweetsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Tweet> {
            return localVarFp.tweetsPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ツイートを削除
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdDelete(tweetId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tweetsTweetIdDelete(tweetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 特定のツイートを取得
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdGet(tweetId: number, options?: RawAxiosRequestConfig): AxiosPromise<Tweet> {
            return localVarFp.tweetsTweetIdGet(tweetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary いいねを取り消す
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdLikeDelete(tweetId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tweetsTweetIdLikeDelete(tweetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ツイートにいいねをする
         * @param {number} tweetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tweetsTweetIdLikePost(tweetId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tweetsTweetIdLikePost(tweetId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 特定のユーザーのツイート一覧を取得
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdTweetsGet(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Tweet>> {
            return localVarFp.usersUserIdTweetsGet(userId, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TweetsApi - object-oriented interface
 * @export
 * @class TweetsApi
 * @extends {BaseAPI}
 */
export class TweetsApi extends BaseAPI {
    /**
     * 
     * @summary ツイート一覧取得
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public tweetsGet(page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).tweetsGet(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ツイート投稿
     * @param {TweetsPostRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public tweetsPost(body: TweetsPostRequest, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).tweetsPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ツイートを削除
     * @param {number} tweetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public tweetsTweetIdDelete(tweetId: number, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).tweetsTweetIdDelete(tweetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 特定のツイートを取得
     * @param {number} tweetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public tweetsTweetIdGet(tweetId: number, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).tweetsTweetIdGet(tweetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary いいねを取り消す
     * @param {number} tweetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public tweetsTweetIdLikeDelete(tweetId: number, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).tweetsTweetIdLikeDelete(tweetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ツイートにいいねをする
     * @param {number} tweetId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public tweetsTweetIdLikePost(tweetId: number, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).tweetsTweetIdLikePost(tweetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 特定のユーザーのツイート一覧を取得
     * @param {number} userId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TweetsApi
     */
    public usersUserIdTweetsGet(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return TweetsApiFp(this.configuration).usersUserIdTweetsGet(userId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 特定のユーザーのツイート一覧を取得
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdTweetsGet: async (userId: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('usersUserIdTweetsGet', 'userId', userId)
            const localVarPath = `/users/{userId}/tweets`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 特定のユーザーのツイート一覧を取得
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUserIdTweetsGet(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tweet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUserIdTweetsGet(userId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersUserIdTweetsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary 特定のユーザーのツイート一覧を取得
         * @param {number} userId 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdTweetsGet(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Tweet>> {
            return localVarFp.usersUserIdTweetsGet(userId, page, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary 特定のユーザーのツイート一覧を取得
     * @param {number} userId 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersUserIdTweetsGet(userId: number, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersUserIdTweetsGet(userId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



