// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Takenari-Yamamoto/twitter-clone/gen/models"
)

// PostAuthLoginHandlerFunc turns a function with the right signature into a post auth login handler
type PostAuthLoginHandlerFunc func(PostAuthLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAuthLoginHandlerFunc) Handle(params PostAuthLoginParams) middleware.Responder {
	return fn(params)
}

// PostAuthLoginHandler interface for that can handle valid post auth login params
type PostAuthLoginHandler interface {
	Handle(PostAuthLoginParams) middleware.Responder
}

// NewPostAuthLogin creates a new http.Handler for the post auth login operation
func NewPostAuthLogin(ctx *middleware.Context, handler PostAuthLoginHandler) *PostAuthLogin {
	return &PostAuthLogin{Context: ctx, Handler: handler}
}

/*
	PostAuthLogin swagger:route POST /auth/login auth postAuthLogin

ログイン
*/
type PostAuthLogin struct {
	Context *middleware.Context
	Handler PostAuthLoginHandler
}

func (o *PostAuthLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostAuthLoginParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostAuthLoginBody post auth login body
//
// swagger:model PostAuthLoginBody
type PostAuthLoginBody struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this post auth login body
func (o *PostAuthLoginBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthLoginBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *PostAuthLoginBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post auth login body based on context it is used
func (o *PostAuthLoginBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthLoginBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthLoginBody) UnmarshalBinary(b []byte) error {
	var res PostAuthLoginBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostAuthLoginOKBody post auth login o k body
//
// swagger:model PostAuthLoginOKBody
type PostAuthLoginOKBody struct {

	// token
	Token string `json:"token,omitempty"`

	// user
	User *models.User `json:"user,omitempty"`
}

// Validate validates this post auth login o k body
func (o *PostAuthLoginOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthLoginOKBody) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postAuthLoginOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postAuthLoginOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post auth login o k body based on the context it is used
func (o *PostAuthLoginOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthLoginOKBody) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if o.User != nil {

		if swag.IsZero(o.User) { // not required
			return nil
		}

		if err := o.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postAuthLoginOK" + "." + "user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postAuthLoginOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthLoginOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthLoginOKBody) UnmarshalBinary(b []byte) error {
	var res PostAuthLoginOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
